// Generated by Dagger (https://dagger.dev).
package com.example.core_utils;

import androidx.lifecycle.ViewModelProvider;
import androidx.viewbinding.ViewBinding;
import dagger.MembersInjector;
import dagger.internal.DaggerGenerated;
import dagger.internal.InjectedFieldSignature;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class BaseFragment_MembersInjector<T extends ViewBinding> implements MembersInjector<BaseFragment<T>> {
  private final Provider<ViewModelProvider.Factory> viewModelFactoryProvider;

  public BaseFragment_MembersInjector(
      Provider<ViewModelProvider.Factory> viewModelFactoryProvider) {
    this.viewModelFactoryProvider = viewModelFactoryProvider;
  }

  public static <T extends ViewBinding> MembersInjector<BaseFragment<T>> create(
      Provider<ViewModelProvider.Factory> viewModelFactoryProvider) {
    return new BaseFragment_MembersInjector<T>(viewModelFactoryProvider);
  }

  @Override
  public void injectMembers(BaseFragment<T> instance) {
    injectViewModelFactory(instance, viewModelFactoryProvider.get());
  }

  @InjectedFieldSignature("com.example.core_utils.BaseFragment.viewModelFactory")
  public static <T extends ViewBinding> void injectViewModelFactory(BaseFragment<T> instance,
      ViewModelProvider.Factory viewModelFactory) {
    instance.viewModelFactory = viewModelFactory;
  }
}
